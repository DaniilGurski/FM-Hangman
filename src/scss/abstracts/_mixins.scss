@use "colors"    as *;
@use "typography" as *;
@use "functions" as *;
@use "breakpoints" as *; //TODO: add to main
@use "sass:math";


// Add min-width media query
@mixin mq-min($min-breakpoint) {
    @media (min-width: em($min-breakpoint)) {
        @content;
    }
}


@mixin mq-max($max-breakpoint) {
    @media (max-width: em($max-breakpoint)) {
        @content;
    }
}


// TODO: change underscore to -
// Convert color map either into css custom properties
@mixin convert_colors($color-map) {
    @each $role, $shades in $color-map {

        @each $lightness, $color in $shades {
            --clr-#{$role}-#{$lightness}: #{$color};
        }
    }
}


// Convert map with typography related values either into css custom properties 
@mixin convert_typography($typescales) {   
    @each $screen-size, $typescale in $typescales {
        // TODO: Add to main: fixes issue if there are three typescales
        @if $screen-size == small {
            @each $scale, $value in $typescale {
                --fs-#{$scale}: #{$value};
            }
        } 

        @if $screen-size == medium {
            @include mq-min($medium-screen-size) {
                @each $scale, $value in $typescale {
                    --fs-#{$scale}: #{$value};
                }
            }
        } 
        
        @if $screen-size == large {
            @include mq-min($large-screen-size) {
                @each $scale, $value in $typescale {
                    --fs-#{$scale}: #{$value};
                }
            }
        } 
    }
}


// Quick access to gap proprety for different situations
@mixin flex($gap: 1rem) {
    display: flex;

    @if type-of($gap) == string{
        @error "Use unitless integer value or rem";
    }

    @if math.is-unitless($gap) {
        gap: rem($gap);
    } @else {
        gap: $gap;
    }
}


@mixin grid($gap: 1rem) {
    display: grid;
    gap: var(--gap, $gap);
}


// Basic list 
// TODO: remove margin: 0, padding: 0, list-style: none from here.
// use ul[role=list] to reset list styling instead for accesability. 
@mixin list($row: "false", $item-gap: 1rem, $off-markers: "false") {
    margin: 0;
    padding: 0;

    @if $row == "true" {
        @include flex($item-gap);
    } @else {
        @include grid($item-gap);
    }

    @if $off-markers == "true" {
        list-style-type: none;
    }
}


// Basic heading 
@mixin heading($font-size, $font-weight: bold, $color: black) {
    font-size: $font-size; 
    font-weight: $font-weight;
    color: $color;
}


// Set appearence to none for custom styling
@mixin reset_appearence() {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
}


// project specific
@mixin text-button() {
    @include box-container();

    cursor: pointer;

    &:hover, 
    &:focus {
        background: $lg-hover-overlay, var(--_box-background);
    }
}


@mixin box-container() {
    --_box-background: var(--box-background, #{$clr-blue});

    display: grid;
    place-items: center;

    color: var(--box-text-color, #{$clr-white}); 
    background: var(--_box-background);
    box-shadow:
    0px 3px 0px 4px $sd-dark-blue,
    inset 0px 4px 0px 4px var(--box-inset-shadow, hsl(223, 100%, 62%));

    text-transform: uppercase;
}

